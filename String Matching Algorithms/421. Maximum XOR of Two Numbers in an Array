421. Maximum XOR of Two Numbers in an Array
Medium

Given an integer array nums, return the maximum result of nums[i] XOR nums[j], where 0 ≤ i ≤ j < n.

Follow up: Could you do this in O(n) runtime?

 

Example 1:

Input: nums = [3,10,5,25,2,8]
Output: 28
Explanation: The maximum result is 5 XOR 25 = 28.
Example 2:

Input: nums = [0]
Output: 0
Example 3:

Input: nums = [2,4]
Output: 6
Example 4:

Input: nums = [8,10,2]
Output: 10
Example 5:

Input: nums = [14,70,53,83,49,91,36,80,92,51,66,70]
Output: 127
 

Constraints:

1 <= nums.length <= 2 * 104
0 <= nums[i] <= 231 - 1


class trie{
    public:
    trie *nxt[2];
        
    trie()
        {
            nxt[0]=nxt[1]=NULL;
        }
};

   
    
class Solution {
public:
   
    trie* head=new trie();
     void insert(int val)
    {
        trie*curr=head;
        for(int i=31;i>=0;i--)
        {
            int bit=(val>>i)&1;
            if(curr->nxt[bit]==NULL)
            {
                curr->nxt[bit]=new trie();
                    
            }
            curr=curr->nxt[bit];
        }
    }

    
    int findMaximumXOR(vector<int>& nums) {
        for(int i=0;i<nums.size();i++)
        {
            insert(nums[i]);
        }
        
        int maxXor=0;
        
        
        long int maxans=INT_MIN;
    
        for(int i=0;i<nums.size();i++)
        {
            trie *curr=head;
            int val=nums[i];
            long int curXor=0;
            for(int j=31;j>=0;j--)
            {
                int bit=(val>>j)&1;
                if(bit==0)
                {
                    if(curr->nxt[1])
                    {
                        curXor+=pow(2,j);
                        curr=curr->nxt[1];
                    
                    }
                    else
                    {
                        curr=curr->nxt[0];
                    }
                }
                else
                {
                    if(curr->nxt[0])
                    {
                        curXor+=pow(2,j);
                        curr=curr->nxt[0];
                    
                    }
                    else
                    {
                        curr=curr->nxt[1];
                    }
                }
                
                maxans=max(maxans,curXor);
            }
        }
    return maxans;
    }
};


same as above

//===================================================
#include<bits/stdc++.h>
using namespace std;

// Time Complexity = O(32*N) ~ O(N)

class TrieNode {
public:

	TrieNode* left; // Represents 0
	TrieNode* right; // Represents 1

	TrieNode()
	{
		left = NULL;
		right = NULL;
	}
};

void insert(TrieNode* root, int ele)
{
	TrieNode* cur = root;
	for (int i = 31; i >= 0; i--)
	{
		int bit = (ele >> i) & 1; // or bit = (1<<i) & ele ? 1 : 0;
		if (bit == 0)
		{
			if (cur->left) cur = cur->left;
			else {
				TrieNode* n = new TrieNode();
				cur->left = n;
				cur = n;
			}
		}
		else {
			if (cur->right) cur = cur->right;
			else {
				TrieNode* n = new TrieNode();
				cur->right = n;
				cur = n;
			}
		}
	}
}

int FIndMaxXorPair(TrieNode* root, int ele)
{
	TrieNode* cur = root;
	int result = 0;
	for (int i = 31; i >= 0; i--)
	{
		int bit = (ele >> i) & 1;

		if (bit == 0)
		{
			// cur_bit of element is 0 and we need to find a 1 if present
			if (cur->right)
			{
				result |= (1 << i);
				cur = cur->right;
			}
			else cur = cur->left; // No other option other than going left
		}
		else {
			// cur_bit of element is 1 and we need to find a 0 if present
			if (cur->left)
			{
				result |= (1 << i);
				cur = cur->left;
			}
			else cur = cur->right; // No other option other than going right
		}
	}
	return result;
}

int main()
{
	TrieNode* root = new TrieNode();
	int arr[6] = {3, 10, 5, 25, 2, 8};
	int result = INT_MIN;

	for (int i = 0; i < 6; i++)
	{
		insert(root, arr[i]);
		int cur_max_pair = FIndMaxXorPair(root, arr[i]);
		result = max(cur_max_pair, result);
	}

	// Time Complexity = O(32*N) ~ O(N)

	cout << result << "\n";
	/*
		This can also be used to find subarray with max xor

		Using property -> f(l, r) = f(0, r) ^ f(0, l - 1);

		// Must insert 0 before
		arr = (3, 10, 5, 25, 2, 8);

		new_arr = {3, 3 ^ 10, 3 ^ 10 ^ 5, 3 ^ 10 ^ 5 ^ 25, 3 ^ 10 ^ 5 ^ 25 ^ 2, 3 ^ 10 ^ 5 ^ 25 ^ 2 ^ 8};

		now this become equivalent to find max xor pair in new_arr
		 int n;
    		cin>>n;
    		vector<int>arr(n);

    		for(int i=0;i<n;i++)
    		{
        		cin>>arr[i];
    		}

    		vector<int> prefixXor(n);
    		prefixXor[0]=arr[0];
    		for(int i=1;i<n;i++)
    		{
        		prefixXor[i]=prefixXor[i-1]^arr[i];
    		}

    		cout<<findMaximumXOR(prefixXor)<<"\n";

	*/

}
